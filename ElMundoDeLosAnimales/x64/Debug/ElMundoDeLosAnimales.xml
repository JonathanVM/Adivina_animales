<?xml version="1.0"?>
<doc>
    <assembly>
        "ElMundoDeLosAnimales"
    </assembly>
    <members>
        <member name="M:MundoAnimales.imprimirArbol">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.crearNodo(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Crea un nuevo nodo, siempre y cuando haya memoria disponible.</summary>
            <returns>Retorna un nuevo nodo, o retorna null si no hay memoria </returns>
        </member>
        <member name="M:MundoAnimales.obtenerCaracteristicaGeneral(System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.adivinar(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.finDelJuego">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.moverCaracteristicaAbajo(nodo*,nodo*,System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.moverCaracteristicaArriba(nodo*,nodo*,System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.moverCaracteristica(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
metodo = true =&gt; moverCaracteristicaArriba
metodo = false =&gt; moverCaracteristicaAbajo
</summary>
        </member>
        <member name="M:MundoAnimales.existePalabra(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,nodo*)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.existePalabra(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.reiniciar">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.insertarNuevo(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Si fue posible crear los nodos, </summary>
            <returns />
        </member>
        <member name="M:MundoAnimales.valoresPorDefecto">
            <summary>En caso de no existir el archivo o no cumplir con un formato valido, se procede a utilizar este metodo.
Este se encarga de cargar valores por defecto para iniciar a jugar.
</summary>
        </member>
        <member name="M:MundoAnimales.guardarArchivo(std.basic_ofstream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,nodo*,System.Int32)">
            <summary>Va guardando en el archivo dado por parametro linea por linea, identificando izquierda, derecha y la raiz</summary>
        </member>
        <member name="M:MundoAnimales.guardarArchivo">
            <summary>Si no existe el archivo, lo crea y sino lo sobrescribe</summary>
        </member>
        <member name="M:MundoAnimales.armarArbolArhivo(nodo*,std.basic_ifstream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>Arma el arbol con los datos provenientes del archivo.
Se asume que un nodo no hoja siempre tiene dos hijos, en caso de que los datos del archivo no cumplieran con esto, 
se cargaran los valores por defecto
</summary>
        </member>
        <member name="M:MundoAnimales.leerArchivo">
            <summary>Lee del archivo solo si existe y si no carga los valores por defecto</summary>
        </member>
        <member name="M:MundoAnimales.Dispose">
            <summary>Destructor de la clase MundoAnimales</summary>
        </member>
        <member name="M:MundoAnimales.#ctor">
            <summary>Constructor de la clase mundo animales, inicializa los atributos</summary>
            <returns />
        </member>
        <member name="M:Control.imprimirArbol">
            <summary />
            <returns />
        </member>
        <member name="M:Control.finDelJuego">
            <summary />
            <returns />
        </member>
        <member name="M:Control.siguientePalabra(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary />
            <returns />
        </member>
        <member name="M:Control.mover(System.UInt32,System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:Control.terminar">
            <summary />
            <returns />
        </member>
        <member name="M:Control.reiniciar">
            <summary />
            <returns />
        </member>
        <member name="M:Control.agregar(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Metodo que agregar una nueva caracteristica al arbol del sistema</summary>
        </member>
        <member name="M:Control.Dispose">
            <summary>Destructor de la clase Control</summary>
            <remarks>Destruye la instancia a la clase del modelo</remarks>
        </member>
        <member name="M:Control.#ctor">
            <summary>Constructor de la clase Control</summary>
            <remarks>Inicializa una instancia a la clase del modelo</remarks>
        </member>
        <member name="M:main">
            <summary>
Bienvenido a nuestro mundo de animales
Integrantes:
Jonathan Vásquez Mora
Delia Hernández Ruiz
</summary>
        </member>
        <member name="M:Interfaz.respuestaAceptada(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.reordenar">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.volverJuego(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.resultado(System.Boolean)">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.adivinar">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.juego">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.imprimirTitulo">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.menu">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.Dispose">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.#ctor">
            <summary />
            <returns />
        </member>
        <member name="T:Interfaz">
            <summary>Implementacion de la clase Interfaz</summary>
        </member>
        <member name="T:Control">
            <summary>Implementacion de la clase Control</summary>
        </member>
        <member name="T:MundoAnimales">
            <summary>Implementacion de la clase MundoAnimales (Modelo)</summary>
        </member>
        <member name="M:imprimeArbol(nodo*)">
            <summary />
            <returns />
        </member>
        <member name="M:buscarNodo(nodo*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Busca el nodo que contiene el elemento dado por parámetro. </summary>
            <returns> Retorna un apuntador al nodo encontrado o
NULL si no lo encontró. </returns>
        </member>
        <member name="M:borrarArbol(nodo*)">
            <summary> Elimina el árbol completo, nodo por nodo. Utiliza un recorrido Pos Orden para tal fin. </summary>
        </member>
    </members>
</doc>