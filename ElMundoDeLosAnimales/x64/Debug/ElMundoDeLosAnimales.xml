<?xml version="1.0"?>
<doc>
    <assembly>
        "ElMundoDeLosAnimales"
    </assembly>
    <members>
        <member name="M:MundoAnimales.imprimirArbol">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.crearNodo(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Crea un nuevo nodo, siempre y cuando haya memoria disponible.</summary>
            <returns>Retorna un nuevo nodo, o retorna null si no hay memoria </returns>
        </member>
        <member name="M:MundoAnimales.obtenerCaracteristicaGeneral(System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.adivinar(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.finDelJuego">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.moverCaracteristicaAbajo(nodo*,nodo*,System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.moverCaracteristicaArriba(nodo*,nodo*,System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.moverCaracteristica(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
metodo = true =&gt; moverCaracteristicaArriba
metodo = false =&gt; moverCaracteristicaAbajo
</summary>
        </member>
        <member name="M:MundoAnimales.existePalabra(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,nodo*)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.existePalabra(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.reiniciar">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.insertarNuevo(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.valoresPorDefecto">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.guardarArchivo">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.leerArchivo">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.Dispose">
            <summary />
            <returns />
        </member>
        <member name="M:MundoAnimales.#ctor">
            <summary />
            <returns />
        </member>
        <member name="M:Control.imprimirArbol">
            <summary />
            <returns />
        </member>
        <member name="M:Control.finDelJuego">
            <summary />
            <returns />
        </member>
        <member name="M:Control.siguientePalabra(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
            <summary />
            <returns />
        </member>
        <member name="M:Control.mover(System.UInt32,System.UInt32)">
            <summary />
            <returns />
        </member>
        <member name="M:Control.terminar">
            <summary />
            <returns />
        </member>
        <member name="M:Control.reiniciar">
            <summary />
            <returns />
        </member>
        <member name="M:Control.agregar(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>Metodo que agregar una nueva caracteristica al arbol del sistema</summary>
        </member>
        <member name="M:Control.Dispose">
            <summary>Destructor de la clase Control</summary>
            <remarks>Destruye la instancia a la clase del modelo</remarks>
        </member>
        <member name="M:Control.#ctor">
            <summary>Constructor de la clase Control</summary>
            <remarks>Inicializa una instancia a la clase del modelo</remarks>
        </member>
        <member name="M:main">
            <summary>
Bienvenido a nuestro mundo de animales
Integrantes:
Jonathan V치squez Mora
Delia Hern치ndez Ruiz
</summary>
        </member>
        <member name="M:Interfaz.respuestaAceptada(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.reordenar">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.volverJuego(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.resultado(System.Boolean)">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.adivinar">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.juego">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.imprimirTitulo">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.menu">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.Dispose">
            <summary />
            <returns />
        </member>
        <member name="M:Interfaz.#ctor">
            <summary />
            <returns />
        </member>
        <member name="T:Interfaz">
            <summary>Implementacion de la clase Interfaz</summary>
        </member>
        <member name="T:Control">
            <summary>Implementacion de la clase Control</summary>
        </member>
        <member name="T:MundoAnimales">
            <summary>Implementacion de la clase MundoAnimales (Modelo)</summary>
        </member>
        <member name="M:alturaArbol(nodo*)">
            <summary />
            <returns />
        </member>
        <member name="M:getLine(nodo*!System.Runtime.CompilerServices.IsConst,System.Int32,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <returns />
        </member>
        <member name="M:printRow(nodo*!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32)">
            <summary />
            <returns />
        </member>
        <member name="M:postOrder(nodo*)">
            <summary />
            <returns />
        </member>
        <member name="M:buscarNodo(nodo*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Busca el nodo que contiene el elemento dado por par치metro. </summary>
            <returns> Retorna un apuntador al nodo encontrado o
NULL si no lo encontr칩. </returns>
        </member>
        <member name="M:borrarArbol(nodo*)">
            <summary> Elimina el 치rbol completo, nodo por nodo. Utiliza un recorrido Pos Orden para tal fin. </summary>
        </member>
        <member name="M:levelOrderTraversalIterativo(nodo*)">
            <summary> Imprime el recorrido del 치rbol en Level-Order (Breadth-first search) ITERATIVO </summary>
        </member>
        <member name="M:levelOrder(nodo*,System.Int32)">
            <summary> Auxiliar para el recorrido del 치rbol en Level-Order </summary>
        </member>
        <member name="M:levelOrderTraversalRecursivo(nodo*)">
            <summary> WRAPPER - Imprime el recorrido del 치rbol en Level-Order (Breadth-first search) RECURSIVO </summary>
        </member>
        <member name="M:recorridoPosOrden(nodo*)">
            <summary> Imprime el recorrido del 치rbol Pos Orden </summary>
        </member>
        <member name="M:recorridoEnOrden(nodo*)">
            <summary> Imprime el recorrido del 치rbol En Orden </summary>
        </member>
        <member name="M:recorridoPreOrden(nodo*)">
            <summary> Imprime el recorrido del 치rbol Pre Orden </summary>
        </member>
        <member name="M:profundidad(nodo*)">
            <summary>Calcula la profundidad (altura) del 치rbol. </summary>
            <returns>Retorna el valor de la profundidad (Depth) </returns>
        </member>
    </members>
</doc>